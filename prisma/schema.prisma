// BuildX Final Prisma Schema (Phases 1–3 + Optional Add-ons)
// Includes: Users, Companies, Projects, Bids, AI, Quotes, Submittals, Schedule, Punchlist, Logs, Contracts, RFIs, Change Orders

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  gc
  sub
  ae
  supplier
  admin
}

enum PlanTier {
  gc_starter
  gc_growth
  gc_unlimited
  sub_free
  sub_verified_pro
  sub_elite_partner
  ae_professional
  ae_enterprise
  supplier_free
  supplier_pro
}

model User {
  id                 String            @id @default(uuid())
  email              String            @unique
  password           String
  role               Role
  planTier           PlanTier
  verified           Boolean           @default(false)
  company            Company?          @relation(fields: [companyId], references: [id])
  companyId          String?
  phone              String?
  fax                String?
  verificationToken  String?
  gcContacts         GcContact[]
  tokenExpires       DateTime?
  certifications     String[] // or Json?
  laborAffiliations  String[] // or Json?
  regions            String[]
  receivedInvites    Invite[]          @relation("received_invites")
  address            String?
  sentInvites        Invite[]          @relation("sent_invites")
  projects           Project[]
  resetToken         String?
  resetTokenExpires  DateTime?
  aiPostAwards       AiPostAward[]
  aiScopes           AiScope[]
  aiSchedules        AiSchedule[]
  aiTakeoffs         AiTakeoff[]
  aiProposals        AiProposal[]
  confidenceScores   ConfidenceScore[]
  aiTakeoffsLimit    Int               @default(0)
  aiTakeoffsUsed     Int               @default(0)
  notifications      Notification[]
  aiEstimations      AiEstimation[]
  aiDiagnostics      AiDiagnostics[]
  activityLogs       ActivityLog[]
  trades             Trade[]           @relation("user_trades")
  bids               Bid[]
  subscriptionActive Boolean           @default(false)
  aiRequests         AIRequest[]
  createdAt          DateTime          @default(now())
  badge              String?
  name               String?
  messageThreads     MessageThread[]   @relation("ThreadParticipants")
  supplier           Supplier?
  AuditLog           AuditLog[]
  UserTrades         UserTrade[]       @relation("user_to_trade")
  Subscription       Subscription?
  Message            Message[]
  ProjectNote        ProjectNote[]
  TeamMember         TeamMember[]
  UserPreference     UserPreference[]
}

model Company {
  id        String     @id @default(uuid())
  name      String     @unique
  address   String?
  website   String?
  users     User[]
  projects  Project[]
  suppliers Supplier[]
}

model Project {
  id                     String            @id @default(uuid())
  name                   String
  address                String?
  userId                 String?
  user                   User?             @relation(fields: [userId], references: [id])
  dueDate                DateTime?
  status                 String            @default("draft")
  visibility             String            @default("private")
  company                Company           @relation(fields: [companyId], references: [id])
  companyId              String
  confidenceScores       ConfidenceScore[]
  estimatedScheduleWeeks Int?
  bids                   Bid[]
  proposalUrl            String? // ✅ new
  proposalChecklist      Json? // ✅ new
  proposalGeneratedBy    String?
  invites                Invite[]
  files                  ProjectFile[]
  valueEstimate          Float?
  scopeSummary           String?
  aiTakeoffs             AiTakeoff[]
  aiPostAwards           AiPostAward[]
  aiScopes               AiScope[]
  aiSchedules            AiSchedule[]
  submittals             Submittal[]
  aiEstimations          AiEstimation[]
  aiProposals            AiProposal[]
  schedule               ScheduleItem[]
  trades                 Trade[]           @relation("project_trades")
  punchlist              PunchlistItem[]
  aiDiagnostics          AiDiagnostics[]
  quotes                 Quote[]
  closedAt               DateTime?
  rfis                   RFI[]
  changeOrders           ChangeOrder[]
  createdAt              DateTime          @default(now())
  RebidRequest           RebidRequest[]
}

model ProjectFile {
  id           String   @id @default(uuid())
  project      Project  @relation(fields: [projectId], references: [id])
  projectId    String
  fileName     String
  fileType     String
  s3Url        String
  tag          String?
  uploadedById String?
  uploadedAt   DateTime @default(now())
  createdAt    DateTime @default(now())
}

model Bid {
  id                  String    @id @default(uuid())
  project             Project   @relation(fields: [projectId], references: [id])
  projectId           String
  invite              Invite?   @relation(fields: [inviteId], references: [id])
  inviteId            String?
  amount              Float?
  fileUrl             String?
  withdrawnAt         DateTime  @default(now())
  contractSigned      Boolean   @default(false) // ✅ Add this
  contractSignedAt    DateTime?
  attachmentUrl       String?
  updatedAt           DateTime  @updatedAt
  notes               String?
  contractUrl         String?
  awardedAt           DateTime  @default(now())
  exclusions          String?
  rebidRequestedAt    DateTime  @default(now())
  invoiceUrl          String? // <-- this must exist
  invoiceUploadedAt   DateTime?
  status              String    @default("submitted")
  proposalUrl         String?
  proposalUploadedAt  DateTime?
  proposalGeneratedBy String?
  confidenceScore     Float?
  flaggedRisks        String?
  rebidMessage        String?
  subcontractor       User      @relation(fields: [subcontractorId], references: [id])
  subcontractorId     String
  submittedAt         DateTime?
  createdAt           DateTime  @default(now())
  scope               String?
}

model Invite {
  id        String  @id @default(uuid())
  projectId String
  project   Project @relation(fields: [projectId], references: [id])

  senderId    String?
  recipientId String?
  sender      User?   @relation("sent_invites", fields: [senderId], references: [id])
  recipient   User?   @relation("received_invites", fields: [recipientId], references: [id])

  email       String
  token       String    @unique
  message     String?
  type        String
  trade       String
  status      String    @default("sent")
  sentAt      DateTime
  acceptedAt  DateTime?
  respondedAt DateTime?
  bids        Bid[]
}

model Submittal {
  id              String    @id @default(uuid())
  project         Project   @relation(fields: [projectId], references: [id])
  projectId       String
  userId          String?
  trade           String
  reviewedById    String? // ✅ Add this
  reviewedAt      DateTime?
  rejectionReason String?
  notes           String?
  title           String
  fileUrl         String
  status          String    @default("pending")
  dueDate         DateTime
  createdAt       DateTime  @default(now())
}

model ScheduleItem {
  id          String   @id @default(uuid())
  project     Project  @relation(fields: [projectId], references: [id])
  projectId   String
  trade       String
  description String
  startDate   DateTime
  endDate     DateTime
  status      String   @default("scheduled")
}

model PunchlistItem {
  id          String   @id @default(uuid())
  project     Project  @relation(fields: [projectId], references: [id])
  projectId   String
  trade       String
  location    String
  description String
  photoUrl    String?
  resolved    Boolean  @default(false)
  createdAt   DateTime @default(now())
}

model Supplier {
  id         String  @id @default(uuid())
  company    Company @relation(fields: [companyId], references: [id])
  companyId  String
  user       User    @relation(fields: [userId], references: [id])
  userId     String  @unique
  name       String // ✅ Add this if it's missing
  email      String?
  catalogUrl String?
  quotes     Quote[]
  verified   Boolean @default(false)
}

model Quote {
  id           String   @id @default(uuid())
  amount       Float
  supplier     Supplier @relation(fields: [supplierId], references: [id])
  supplierId   String
  notes        String?
  project      Project  @relation(fields: [projectId], references: [id])
  projectId    String
  trade        String
  material     String
  price        Float
  acceptedAt   DateTime @default(now())
  deliveryTime Int?
  fileUrl      String?
  rejectedAt   DateTime @default(now())
  status       String   @default("pending")
  submittedAt  DateTime @default(now())
}

model Notification {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  type      String
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
}

model AIRequest {
  id          String    @id @default(uuid())
  user        User      @relation(fields: [userId], references: [id])
  userId      String
  projectId   String?
  bidId       String?
  type        String
  input       Json
  output      Json?
  status      String    @default("pending")
  error       String?
  requestedAt DateTime  @default(now())
  completedAt DateTime?
}

model ActivityLog {
  id        String    @id @default(uuid())
  user      User?     @relation(fields: [userId], references: [id])
  userId    String? // ✅ MUST match the relation above
  action    String
  entity    String
  entityId  String
  metadata  Json?
  details   String?
  createdAt DateTime  @default(now())
  timestamp DateTime?
}

model ChangeOrder {
  id          String   @id @default(uuid())
  project     Project  @relation(fields: [projectId], references: [id])
  projectId   String
  title       String
  description String
  amount      Float
  approved    Boolean  @default(false)
  submittedAt DateTime @default(now())
}

model RFI {
  id          String    @id @default(uuid())
  project     Project   @relation(fields: [projectId], references: [id])
  projectId   String
  question    String
  response    String?
  trade       String
  status      String    @default("open")
  submittedAt DateTime  @default(now())
  respondedAt DateTime?
}

model Trade {
  id        String      @id @default(uuid())
  division  String
  code      String?
  name      String      @unique
  projects  Project[]   @relation("project_trades")
  users     User[]      @relation("user_trades")
  custom    Boolean     @default(false)
  createdAt DateTime    @default(now())
  UserTrade UserTrade[]
}

model UserTrade {
  id      String @id @default(uuid())
  user    User   @relation("user_to_trade", fields: [userId], references: [id])
  userId  String
  trade   Trade  @relation(fields: [tradeId], references: [id])
  tradeId String
}

model AiTakeoff {
  id        String   @id @default(uuid())
  userId    String
  projectId String
  fileId    String
  status    String
  jobId     String
  resultUrl String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id]) // ✅ relation
  project Project @relation(fields: [projectId], references: [id])
}

model AiDiagnostics {
  id            String   @id @default(uuid())
  projectId     String
  userId        String
  issues        Json?
  summary       String?
  createdAt     DateTime @default(now())
  flaggedTrades Json?
  riskLevel     String?
  project       Project  @relation(fields: [projectId], references: [id])
  user          User     @relation(fields: [userId], references: [id])
}

model AiEstimation {
  id             String   @id @default(uuid())
  projectId      String
  userId         String
  materials      Json? // ✅ Add
  labor          Json? // ✅ Add
  timeline       Json?
  costEstimate   Float
  tradeBreakdown Json
  createdAt      DateTime @default(now())

  project Project @relation(fields: [projectId], references: [id])
  user    User    @relation(fields: [userId], references: [id])
}

model ConfidenceScore {
  id        String   @id @default(uuid())
  userId    String
  projectId String
  score     Float
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id])
  project Project @relation(fields: [projectId], references: [id])
}

model AiProposal {
  id        String   @id @default(uuid())
  userId    String
  projectId String
  url       String
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id])
  project Project @relation(fields: [projectId], references: [id])
}

model AiSchedule {
  id               String   @id @default(uuid())
  userId           String
  projectId        String
  scheduleJson     Json
  milestoneSummary Json?
  createdAt        DateTime @default(now())
  user             User     @relation(fields: [userId], references: [id])
  project          Project  @relation(fields: [projectId], references: [id])
}

model AiScope {
  id            String   @id @default(uuid())
  userId        String
  projectId     String
  scopeSummary  String?
  tradesMatched Json?
  createdAt     DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id])
  project Project @relation(fields: [projectId], references: [id])
}

model AiPostAward {
  id            String   @id @default(uuid())
  projectId     String
  userId        String
  summaryReport String
  nextSteps     Json?
  createdAt     DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id])
  project Project @relation(fields: [projectId], references: [id])
}

model AuditLog {
  id        String   @id @default(uuid())
  userId    String
  action    String
  details   String?
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}

model Subscription {
  id     String @id @default(uuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique

  stripeCustomerId     String?
  stripeSubscriptionId String?
  planTier             String?
  status               String? // e.g., "active", "canceled", "past_due"
  currentPeriodEnd     DateTime?

  canceledAt DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model GcContact {
  id        String   @id @default(uuid())
  userId    String
  company   String?
  user      User     @relation(fields: [userId], references: [id])
  name      String
  email     String?
  phone     String?
  createdAt DateTime @default(now())
}

model FeatureFlag {
  id        String   @id @default(uuid())
  key       String   @unique
  enabled   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MessageThread {
  id           String    @id @default(uuid())
  participants User[]    @relation("ThreadParticipants")
  messages     Message[]
  createdAt    DateTime  @default(now())
}

model Message {
  id        String        @id @default(uuid())
  content   String
  senderId  String
  sender    User          @relation(fields: [senderId], references: [id])
  threadId  String
  thread    MessageThread @relation(fields: [threadId], references: [id])
  createdAt DateTime      @default(now())
  sentAt    DateTime      @default(now())
}

model ProjectNote {
  id        String   @id @default(uuid())
  projectId String
  userId    String
  content   String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model FileNotification {
  id        String   @id @default(uuid())
  userId    String
  fileId    String
  createdAt DateTime @default(now())
}

model RebidRequest {
  id        String   @id @default(uuid())
  projectId String
  project   Project  @relation(fields: [projectId], references: [id])
  userId    String
  senderId  String
  message   String
  createdAt DateTime @default(now())
}

model TeamMember {
  ownerId String
  userId  String
  role    String

  user User @relation(fields: [userId], references: [id])

  @@id([ownerId, userId])
}

model ProjectTemplate {
  id            String   @id @default(uuid())
  ownerId       String
  name          String
  description   String?
  trades        String[]
  valueEstimate Float?
  createdAt     DateTime @default(now())
}

model UserPreference {
  userId             String   @id
  user               User     @relation(fields: [userId], references: [id])
  emailNotifications Boolean  @default(true)
  darkMode           Boolean  @default(false)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}
