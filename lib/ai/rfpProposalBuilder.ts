// /lib/ai/rfpProposalBuilder.ts ‚Äî AI Proposal Generator for GC/AE (RFP Based)

import { Project, ProjectFile } from '@prisma/client';
import { PDFDocument, StandardFonts, rgb } from 'pdf-lib';

export async function parseRfpAndGenerateProposal(files: ProjectFile[]) {
  // üîß Simulate extracting requirements from RFP documents
  const requiredDocs = [
    'W-9 Form',
    'Certificate of Insurance',
    'Company Safety Manual',
    'Licenses + Bonding Certs',
  ];

  const pdf = await PDFDocument.create();
  const page = pdf.addPage([600, 800]);
  const font = await pdf.embedFont(StandardFonts.Helvetica);

  page.drawText('BuildX Smart Proposal (AI)', {
    x: 50,
    y: 760,
    size: 18,
    font,
    color: rgb(0, 0, 0.6)
  });

  page.drawText('Scope Summary:', { x: 50, y: 720, size: 12, font });
  page.drawText('- Furnish and install all work per attached specifications and drawings.', { x: 60, y: 700, size: 10, font });
  page.drawText('- Complete within schedule defined in the RFP.', { x: 60, y: 685, size: 10, font });

  page.drawText('Required Attachments Checklist:', { x: 50, y: 640, size: 12, font });
  let y = 620;
  for (const doc of requiredDocs) {
    page.drawText(`‚òê ${doc}`, { x: 60, y, size: 10, font });
    y -= 18;
  }

  page.drawText('Generated by BuildX Smart Proposal AI', { x: 50, y: 100, size: 8, font });

  const pdfBytes = await pdf.save();

  return {
    checklist: requiredDocs,
    pdf: Buffer.from(pdfBytes)
  };
}
